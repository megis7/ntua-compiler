{
open FSharp.Text.Lexing
open System
open Parser
open Tokens

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

 // TODO: Check that character has unit length
}

let letter = ['a' - 'z']
let digit = ['0' - '9']
let operator = ['(' ')' '+' '-' '/' '*' '%' '=']
let whitespace = [' ' '\t']
let newline = '\r' | '\n' | "\r\n"

let integer = digit*

let fractional = '.' digit+
let exp = ['e' 'E'] ['+' '-']? digit+
let real = integer fractional? exp?

let identifier = ['a'-'z' 'A'-'Z'] ['a'-'z' 'A'-'Z' '0'-'9' '_']*

let escapes = ['n' 't' 'r' '0' '\\' '\'' '"']

rule read =
  parse
  | "integer"     { K_basicType (Integer) }
  | "boolean"     { K_basicType (Boolean) }
  | "char"        { K_basicType (Character) }
  | "real"        { K_basicType (Real) }

  | "program"     { K_program }
  | "begin"       { K_begin }
  | "end"         { K_end }

  | "var"         { K_var }

  | "print"       { S_print }

  | ";"           { Semicolon }
  | ":"           { Colon }
  | ","           { Comma }
  | "."           { Dot }

  | identifier    { T_id (lexeme lexbuf) }
  | integer       { T_int (int (lexeme lexbuf)) }
  | real          { T_real (float (lexeme lexbuf)) }
  | '"'           { T_str (readString "" lexbuf) }
  | '\''          { T_char (readChar "" lexbuf) }
  | "(*"          { consumeComment lexbuf |> ignore; read lexbuf }
  | newline       { newline lexbuf; read lexbuf }
  | whitespace+   { read lexbuf }
  | eof           { EOF }
  | _             { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line) lexbuf.StartPos.Column))}

and readString str =
  parse
  | '"'                   { str }
  | '\\'                  { readString (str + readEscape "\\" lexbuf) lexbuf }
  | [^'"' '\\' '\n']+     { readString (str + (lexeme lexbuf)) lexbuf }
  | eof | '\n'            { raise (Exception ("String not terminated")) }

and readChar str =
  parse
  | '\''                  { str }
  | '\\'                  { readChar (str + readEscape "\\" lexbuf) lexbuf }
  | _                     { readChar (str + lexeme lexbuf) lexbuf }
  | eof                   { raise (Exception ("Character not terminated")) }

and readEscape str =
  parse
  | escapes     { str + lexeme lexbuf }
  | _           { raise (Exception ("Bad escape sequence")) }

and consumeComment =
  parse
  | "*)"        { }
  | _           { consumeComment lexbuf }
  | eof         { raise (Exception ("Comment not terminated")) }