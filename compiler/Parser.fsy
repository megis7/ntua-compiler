//This parser has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 15)
%{
// open JsonParsing
open Tokens
%}

%start start

%token T_print
%token <int> T_int
%token EOF

%type <MinibasicStatement list option> start

%%

start: prog { $1 }

prog:
  | EOF { None }
  | stmt_list { Some $1 }

stmt_list:
  | { [] }
  | stmt_list stmt { $2 :: $1 }

stmt:
  | T_print expr { Print $2 }
  // | T_let T_id T_equals expr { All "Stmt" }
  // | "print" expr
  // | "for" expr "do" stmt
  // | "if" expr "then" stmt
  // | "if" expr "then" stmt "else" stmt
  // | "begin" stmt_list "end"

expr:
  | T_int { Int $1 }
  // | '(' expr ')'
  // | expr '+' expr
  // | expr '-' expr
  // | expr '*' expr
  // | expr '/' expr
  // | expr '%' expr

// object_fields: rev_object_fields { List.rev $1 };

// rev_object_fields:
//   | { [] }
//   | STRING COLON value { [($1,$3)] }
//   | rev_object_fields COMMA STRING COLON value { ($3, $5) :: $1 }

// array_values:
//   | { [] }
//   | rev_values { List.rev $1 }

// rev_values:
//   | value { [$1] }
//   | rev_values COMMA value { $3 :: $1 }