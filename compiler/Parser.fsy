%{
open Compiler.Base
open Compiler.Helpers
open Compiler.Helpers.Error.Parser
open FSharp.Text.Parsing
open System.Collections.Generic

let private parseError (msg: string) (start: Position) =
  sprintf "%s %s" (Error.FormatPrologue start) msg 

// FsYacc function that is called on error
let parse_error_rich = Some (fun (x: ParseErrorContext<'tok>) -> 
    errorList.Add(parseError (erroneousLexeme x) (fst x.ParseState.ResultRange)))

%}

%start start

%token <int> T_int
%token <string> T_real
%token <string> T_id
%token <string> T_str
%token <string> T_char

%token <Type> K_basicType
%token K_array K_of

%token K_program K_begin K_end K_var K_procedure K_function K_forward K_result
%token K_true K_false K_nil

%token O_assign O_addr O_not O_plus O_minus O_mult O_div O_divi O_mod O_or O_and O_equals O_nequals O_less O_leq O_greater O_geq

%token Semicolon Colon Comma Dot Lbrack Rbrack Carret Lparen Rparen

%token EOF

%type <Program option> start

%left O_equals O_greater O_less O_leq O_geq O_nequals
%left O_plus O_minus O_or
%left O_mult O_div O_divi O_mod O_and
%nonassoc UNOP
%nonassoc Carret
%nonassoc O_addr
%nonassoc BRACK
%nonassoc RVALUE

%%

start: program { $1 }

program:
  | EOF { None }
  | K_program T_id Semicolon body Dot { Some <| Program ($2, $4) }

body:
  | local_list block { Body ($1 |> List.rev |> List.collect id, $2 ) }

local_list:
  | { [] }
  | local_list local { $2 :: $1 }

local:
  | K_var multi_var_decl              { $2 |> List.rev }          // Declaration of variable
  | K_forward header Semicolon        { [Forward $2] }            // Declaration of function
  | header Semicolon body Semicolon   { [Process ($1, $3)] }      // Definition of function
  | error                             { [DeclError ("Syntax error", fst parseState.ResultRange)] }

// Declaration of variables

multi_var_decl:
  | id_list Colon ptype Semicolon { $1 |> List.map (fun id -> Variable (id, $3)) }
  | multi_var_decl id_list Colon ptype Semicolon { ( $2 |> List.map (fun id -> Variable (id, $4)) ) @ $1 }

id_list:
  | T_id { [$1] }
  | id_list Comma T_id { $3 :: $1 }

// End Declaration of variables

// Procedures and Functions Header

header:
  | K_procedure T_id Lparen Rparen                            { ProcessHeader ($2, [], Unit)}
  | K_procedure T_id Lparen param_list Rparen                 { ProcessHeader ($2, $4 |> List.rev |> List.collect id, Unit)}
  | K_function  T_id Lparen Rparen Colon ptype                { ProcessHeader ($2, [], $6)} 
  | K_function  T_id Lparen param_list Rparen Colon ptype     { ProcessHeader ($2, $4 |> List.rev |> List.collect id, $7)} 

param_list:
  | param                         { [$1] }
  | param_list Semicolon param    { $3 :: $1 }

param:
  | id_list Colon ptype           { $1 |> List.map (fun id -> ProcessParam (id, $3, ByValue)) |> List.rev }
  | K_var id_list Colon ptype     { $2 |> List.map (fun id -> ProcessParam (id, $4, ByRef)) |> List.rev}

// End of Header

// Type

ptype:
  | K_basicType                                       { $1 }
  | K_array Lbrack T_int Rbrack K_of ptype            { Array ($6, $3) }
  | K_array Lbrack O_plus T_int Rbrack K_of ptype     { Array ($7, $4) }
  | K_array Lbrack O_minus T_int Rbrack K_of ptype    { Array ($7, -$4) }
  | K_array K_of ptype                          { IArray $3 }
  | Carret ptype                                { Ptr $2 }

// End of Type

block:
  | K_begin stmt_list K_end { $2 |> List.rev }

stmt_list:
  | stmt { [$1] }
  | stmt_list Semicolon stmt { $3 :: $1 }

stmt:
  |                           { Empty }
  | block                     { Block $1 }
  | lvalue O_assign expr      { Assign ($1, $3, fst parseState.ResultRange) }
  | error                     { Error ("Syntax error", fst parseState.ResultRange)  }

expr:
  | lvalue                    { LExpression $1 }
  | rvalue %prec RVALUE       { RExpression $1 }

lvalue:
  | T_id                       { Identifier $1 }
  | T_str                      { StringConst $1 }
  | lvalue Lbrack expr Rbrack %prec BRACK  { Brackets ($1, $3) }
  | expr Carret                { Dereference $1 }
  | Lparen lvalue Rparen       { LParens $2 }
  | K_result                   { Result }

rvalue:
  | T_int                   { IntConst $1 }
  | K_true                  { BoolConst true }
  | K_false                 { BoolConst false }   
  | T_real                  { RealConst $1 }
  | T_char                  { CharConst $1 }
  | Lparen rvalue Rparen    { RParens $2 }
  | O_addr expr             { AddressOf $2 }
  | K_nil                   { Nil }
  | unop expr %prec UNOP    { Unop ($1, $2) }
  | expr O_plus expr        { Binop ($1, Add, $3) }
  | expr O_minus expr       { Binop ($1, Sub, $3) }
  | expr O_mult expr        { Binop ($1, Mult, $3) }
  | expr O_div expr         { Binop ($1, Div, $3) }
  | expr O_divi expr        { Binop ($1, Divi, $3) }
  | expr O_mod expr         { Binop ($1, Modi, $3) }
  | expr O_or expr          { Binop ($1, Or, $3) }
  | expr O_and expr         { Binop ($1, And, $3) }
  | expr O_equals expr      { Binop ($1, Equals, $3) }
  | expr O_nequals expr     { Binop ($1, NotEquals, $3) }
  | expr O_less expr        { Binop ($1, Less, $3) }
  | expr O_leq expr         { Binop ($1, LessEquals, $3) }
  | expr O_greater expr     { Binop ($1, Greater, $3) }
  | expr O_geq expr         { Binop ($1, GreaterEquals, $3) }
  | call                    { $1 }
  
unop:
  | O_not     { Not }
  | O_plus    { Positive } 
  | O_minus   { Negative }

call:
  | T_id Lparen Rparen                { Call ($1, []) }
  | T_id Lparen expr_list Rparen      { Call ($1, $3 |> List.rev) }

expr_list:
  | expr                    { [$1] }
  | expr_list Comma expr    { $3 :: $1 }